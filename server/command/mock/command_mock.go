// Code generated by MockGen. DO NOT EDIT.
// Source: server/command/command.go

// Package mock_command is a generated GoMock package.
package mock_command

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockCommand) Handle(args ...string) (*model.CommandResponse, *model.AppError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handle", varargs...)
	ret0, _ := ret[0].(*model.CommandResponse)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// Handle indicates an expected call of Handle
func (mr *MockCommandMockRecorder) Handle(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommand)(nil).Handle), args...)
}

// Help mocks base method
func (m *MockCommand) Help(args ...string) (*model.CommandResponse, *model.AppError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Help", varargs...)
	ret0, _ := ret[0].(*model.CommandResponse)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// Help indicates an expected call of Help
func (mr *MockCommandMockRecorder) Help(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Help", reflect.TypeOf((*MockCommand)(nil).Help), args...)
}

// executeKeyPairGenerate mocks base method
func (m *MockCommand) executeKeyPairGenerate(args ...string) (*model.CommandResponse, *model.AppError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "executeKeyPairGenerate", varargs...)
	ret0, _ := ret[0].(*model.CommandResponse)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// executeKeyPairGenerate indicates an expected call of executeKeyPairGenerate
func (mr *MockCommandMockRecorder) executeKeyPairGenerate(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executeKeyPairGenerate", reflect.TypeOf((*MockCommand)(nil).executeKeyPairGenerate), args...)
}

// executeKeyOverwrite mocks base method
func (m *MockCommand) executeKeyOverwrite(args ...string) (*model.CommandResponse, *model.AppError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "executeKeyOverwrite", varargs...)
	ret0, _ := ret[0].(*model.CommandResponse)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// executeKeyOverwrite indicates an expected call of executeKeyOverwrite
func (mr *MockCommandMockRecorder) executeKeyOverwrite(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executeKeyOverwrite", reflect.TypeOf((*MockCommand)(nil).executeKeyOverwrite), args...)
}

// executeKeyExport mocks base method
func (m *MockCommand) executeKeyExport(args ...string) (*model.CommandResponse, *model.AppError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "executeKeyExport", varargs...)
	ret0, _ := ret[0].(*model.CommandResponse)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// executeKeyExport indicates an expected call of executeKeyExport
func (mr *MockCommandMockRecorder) executeKeyExport(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executeKeyExport", reflect.TypeOf((*MockCommand)(nil).executeKeyExport), args...)
}

// postCommandResponse mocks base method
func (m *MockCommand) postCommandResponse(text string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "postCommandResponse", text)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// postCommandResponse indicates an expected call of postCommandResponse
func (mr *MockCommandMockRecorder) postCommandResponse(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "postCommandResponse", reflect.TypeOf((*MockCommand)(nil).postCommandResponse), text)
}

// responsef mocks base method
func (m *MockCommand) responsef(format string, args ...interface{}) (*model.CommandResponse, *model.AppError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "responsef", varargs...)
	ret0, _ := ret[0].(*model.CommandResponse)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// responsef indicates an expected call of responsef
func (mr *MockCommandMockRecorder) responsef(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "responsef", reflect.TypeOf((*MockCommand)(nil).responsef), varargs...)
}

// responseRedirect mocks base method
func (m *MockCommand) responseRedirect(redirectURL string) *model.CommandResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "responseRedirect", redirectURL)
	ret0, _ := ret[0].(*model.CommandResponse)
	return ret0
}

// responseRedirect indicates an expected call of responseRedirect
func (mr *MockCommandMockRecorder) responseRedirect(redirectURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "responseRedirect", reflect.TypeOf((*MockCommand)(nil).responseRedirect), redirectURL)
}
