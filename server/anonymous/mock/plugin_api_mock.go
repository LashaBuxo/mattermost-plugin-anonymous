// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bakurits/mattermost-plugin-anonymous/server/anonymous (interfaces: PluginAPI)

// Package mock is a generated GoMock package.
package mock

import (
	anonymous "github.com/bakurits/mattermost-plugin-anonymous/server/anonymous"
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
)

// MockPluginAPI is a mock of PluginAPI interface
type MockPluginAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPluginAPIMockRecorder
}

// MockPluginAPIMockRecorder is the mock recorder for MockPluginAPI
type MockPluginAPIMockRecorder struct {
	mock *MockPluginAPI
}

// NewMockPluginAPI creates a new mock instance
func NewMockPluginAPI(ctrl *gomock.Controller) *MockPluginAPI {
	mock := &MockPluginAPI{ctrl: ctrl}
	mock.recorder = &MockPluginAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginAPI) EXPECT() *MockPluginAPIMockRecorder {
	return m.recorder
}

// GetActivePlugins mocks base method
func (m *MockPluginAPI) GetActivePlugins() ([]anonymous.PluginIdentifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePlugins")
	ret0, _ := ret[0].([]anonymous.PluginIdentifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePlugins indicates an expected call of GetActivePlugins
func (mr *MockPluginAPIMockRecorder) GetActivePlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePlugins", reflect.TypeOf((*MockPluginAPI)(nil).GetActivePlugins))
}

// SendEphemeralPost mocks base method
func (m *MockPluginAPI) SendEphemeralPost(arg0 string, arg1 *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", arg0, arg1)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockPluginAPIMockRecorder) SendEphemeralPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockPluginAPI)(nil).SendEphemeralPost), arg0, arg1)
}
