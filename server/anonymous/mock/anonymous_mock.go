// Code generated by MockGen. DO NOT EDIT.
// Source: server/anonymous/anonymous.go

// Package mock_anonymous is a generated GoMock package.
package mock_anonymous

import (
	store "github.com/bakurits/mattermost-plugin-anonymous/server/store"
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
)

// MockAnonymous is a mock of Anonymous interface
type MockAnonymous struct {
	ctrl     *gomock.Controller
	recorder *MockAnonymousMockRecorder
}

// MockAnonymousMockRecorder is the mock recorder for MockAnonymous
type MockAnonymousMockRecorder struct {
	mock *MockAnonymous
}

// NewMockAnonymous creates a new mock instance
func NewMockAnonymous(ctrl *gomock.Controller) *MockAnonymous {
	mock := &MockAnonymous{ctrl: ctrl}
	mock.recorder = &MockAnonymousMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnonymous) EXPECT() *MockAnonymousMockRecorder {
	return m.recorder
}

// SendEphemeralPost mocks base method
func (m *MockAnonymous) SendEphemeralPost(userId string, post *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", userId, post)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockAnonymousMockRecorder) SendEphemeralPost(userId, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockAnonymous)(nil).SendEphemeralPost), userId, post)
}

// LoadUser mocks base method
func (m *MockAnonymous) LoadUser(mattermostUserID string) (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUser", mattermostUserID)
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUser indicates an expected call of LoadUser
func (mr *MockAnonymousMockRecorder) LoadUser(mattermostUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUser", reflect.TypeOf((*MockAnonymous)(nil).LoadUser), mattermostUserID)
}

// StoreUser mocks base method
func (m *MockAnonymous) StoreUser(user *store.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUser indicates an expected call of StoreUser
func (mr *MockAnonymousMockRecorder) StoreUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockAnonymous)(nil).StoreUser), user)
}

// DeleteUser mocks base method
func (m *MockAnonymous) DeleteUser(mattermostUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", mattermostUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockAnonymousMockRecorder) DeleteUser(mattermostUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAnonymous)(nil).DeleteUser), mattermostUserID)
}

// StorePublicKey mocks base method
func (m *MockAnonymous) StorePublicKey(publicKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePublicKey", publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePublicKey indicates an expected call of StorePublicKey
func (mr *MockAnonymousMockRecorder) StorePublicKey(publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePublicKey", reflect.TypeOf((*MockAnonymous)(nil).StorePublicKey), publicKey)
}

// GetPublicKey mocks base method
func (m *MockAnonymous) GetPublicKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockAnonymousMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockAnonymous)(nil).GetPublicKey))
}

// MockPluginAPI is a mock of PluginAPI interface
type MockPluginAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPluginAPIMockRecorder
}

// MockPluginAPIMockRecorder is the mock recorder for MockPluginAPI
type MockPluginAPIMockRecorder struct {
	mock *MockPluginAPI
}

// NewMockPluginAPI creates a new mock instance
func NewMockPluginAPI(ctrl *gomock.Controller) *MockPluginAPI {
	mock := &MockPluginAPI{ctrl: ctrl}
	mock.recorder = &MockPluginAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginAPI) EXPECT() *MockPluginAPIMockRecorder {
	return m.recorder
}

// SendEphemeralPost mocks base method
func (m *MockPluginAPI) SendEphemeralPost(userId string, post *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", userId, post)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockPluginAPIMockRecorder) SendEphemeralPost(userId, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockPluginAPI)(nil).SendEphemeralPost), userId, post)
}
